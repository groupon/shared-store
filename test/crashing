#!/usr/bin/env node

'use strict';

const SharedStore = require('../');
const httpResource = require('../lib/http');

function fetchData(headers) {
  return Promise.resolve({
    url: 'http://my-url',
    response: {
      headers: {
        'last-modified': new Date().toString(),
        etag: 'some-etag',
      },
    },
    body: { incoming: headers, crashing: false },
  }).then(value => {
    return new Promise(resolve => {
      // delay to ensure temp reads are faster
      setTimeout(resolve, 1000, value);
    });
  });
}

const options = {
  temp: process.argv[2],
  active: true,
  loader() {
    return httpResource({ fetch: fetchData });
  },
};

function unexpectedError(err) {
  process.nextTick(() => {
    throw err;
  });
}

new SharedStore(options)
  .init({})
  .then(config => {
    if (config.crashing) {
      throw new Error('Expected crash');
    } else {
      // eslint-disable-next-line no-console
      console.log('ok');
      // eslint-disable-next-line no-process-exit
      process.exit(0);
    }
  })
  .catch(unexpectedError);
